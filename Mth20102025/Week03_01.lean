import Mathlib.Algebra.Group.Pointwise.Finset.Basic
import Mathlib.GroupTheory.Perm.Cycle.Concrete

open scoped Pointwise
open Finset

/-
# Group generators.

Let `G` be a group and let `T` be a subset of `G`. The group *generated* by `T` is the smallest
subgroup of `G` that contains `T`.

Below is a Lean function `closureFinset` for finding the group generated by `T`. You need not
understand how it works.
-/

/--
`closureFinset T` finds the subgroup of a finite group `G`
generated by the finite set of generators `T : Finset G`.
-/
def closureFinset {G : Type*} [Group G] [Fintype G] [DecidableEq G]
    (T : Finset G) : Finset G := by
  let U : Finset G := T ∪ T⁻¹
  let step (frontier : Finset G) : Finset G :=
    frontier.biUnion fun g => U.image fun u => g * u
  let m : Nat := Fintype.card G

  let rec loop (k : Nat) (visited frontier : Finset G) : Finset G :=
    match k with
    | 0 => visited
    | k + 1 =>
      if not frontier.Nonempty then
        visited
      else
        let s := step frontier
        let fresh := s \ visited
        loop k (visited ∪ fresh) fresh

  exact loop m {1} {1}

open Equiv

/-- `S n` is the group of permutations on `{0, 1, 2, ..., n - 1}` -/
abbrev S (n : Nat) := Perm (Fin n)

def s : S 5   := c[0, 1, 3]

def t : S 5 := c[0, 1, 2, 3]


-- We find the subgroup generated by `s` and `t`:
#eval closureFinset {s, t}

#eval (closureFinset {s, t}).card

/-
## Exercise 1

Find a set of generators for the group `S 5`. What is the size of  smallest set that
generates `S 5`?
-/



#min_imports
#redundant_imports
