import Mathlib

open scoped BigOperators
open Finset

/-- Pointwise product of two finsets in a group. -/
def finsetMul {G} [DecidableEq G] [Mul G] (A B : Finset G) : Finset G :=
  A.biUnion (fun a => B.image (fun b => a * b))

/-- One expansion step: given the visited set `X` and the generator set `T`,
    add all products `x * t` (with `x ∈ X, t ∈ T`). -/
def step {G} [DecidableEq G] [Mul G] (T X : Finset G) : Finset G :=
  X ∪ finsetMul X T

/-- Bounded closure under a finite generating set `T`, starting from `{1}` and
    expanding at most `|G|` times.  In a finite group this stabilises at the subgroup
    generated by `T`. -/
def boundedClosure {G} [DecidableEq G] [Fintype G] [Group G] (T : Finset G) : Finset G :=
  let start : Finset G := {1}
  (Nat.iterate (step T) (Fintype.card G)) start

/-- The subgroup generated by two elements, returned as a `Finset`. -/
def subgroupFinsetOfTwo {G} [DecidableEq G] [Fintype G] [Group G]
    (σ τ : G) : Finset G :=
  let T : Finset G := ({σ, τ, σ⁻¹, τ⁻¹} : Finset G)
  boundedClosure T

/-
### Example: subgroup generated by two permutations on `Fin 4`
-/
open Equiv

def σ₄ : Equiv.Perm (Fin 4) := Equiv.swap 0 1 * Equiv.swap 2 3
def τ₄ : Equiv.Perm (Fin 4) := Equiv.swap 1 2

#eval boundedClosure ({σ₄, τ₄})
